--#region USER_LEVEL
--TABLE COLOR
-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.USER_LEVEL CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.USER_LEVEL_SEQ';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.USER_LEVEL_TRIGGER';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
-- Create table
CREATE TABLE TODOUSER.USER_LEVEL (
ID_USER_LEVEL  NUMBER PRIMARY KEY,
USER_LEVEL_LABEL VARCHAR2(64) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE TODOUSER.USER_LEVEL_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER TODOUSER.USER_LEVEL_TRIGGER BEFORE
INSERT ON TODOUSER.USER_LEVEL
FOR EACH ROW
BEGIN
IF :NEW.ID_USER_LEVEL IS NULL THEN
    :NEW.ID_USER_LEVEL := TODOUSER.USER_LEVEL_SEQ.NEXTVAL;
END IF;
END;
/

INSERT INTO TODOUSER.USER_LEVEL ( USER_LEVEL_LABEL ) VALUES ( 'Manager' );
INSERT INTO TODOUSER.USER_LEVEL ( USER_LEVEL_LABEL ) VALUES ( 'Developer' );
INSERT INTO TODOUSER.USER_LEVEL ( USER_LEVEL_LABEL ) VALUES ( 'Administrator' );


--#endregion


-- USER_TABLE

--#region USER
-- Drop if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.USER_TABLE CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.USER_SEQ';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.USER_TABLE_TRIGGER';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
-- Table creation
CREATE TABLE TODOUSER.USER_TABLE(
ID_USER   NUMBER PRIMARY KEY,
FIRSTNAME VARCHAR2(255) NOT NULL,
LASTNAME  VARCHAR2(255) NOT NULL,
EMAIL     VARCHAR2(255) UNIQUE NOT NULL,
AVATAR    VARCHAR2(255) NULL,
USER_LEVEL INT,
TELEGRAMUSERNAME VARCHAR2(255),
PASSWORD  VARCHAR2(255) NOT NULL,
LAST_SEEN TIMESTAMP NULL,
CREATED TIMESTAMP NULL,


FOREIGN KEY ( USER_LEVEL )
    REFERENCES TODOUSER.USER_LEVEL ( ID_USER_LEVEL )
        ON DELETE SET NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE TODOUSER.USER_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER TODOUSER.USER_TABLE_TRIGGER BEFORE
INSERT ON TODOUSER.USER_TABLE
FOR EACH ROW
BEGIN
IF :NEW.ID_USER IS NULL THEN
    :NEW.ID_USER := TODOUSER.USER_SEQ.NEXTVAL;
END IF;
END;
/

--#endregion

--#region COLOR
--TABLE COLOR
-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.COLOR CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.COLOR_SEQ';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.color_table_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
-- Create table
CREATE TABLE TODOUSER.COLOR (
ID_COLOR  NUMBER PRIMARY KEY,
HEX_COLOR VARCHAR2(8) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE TODOUSER.COLOR_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER TODOUSER.COLOR_TABLE_TRIGGER BEFORE
INSERT ON TODOUSER.COLOR
FOR EACH ROW
BEGIN
IF :NEW.ID_COLOR IS NULL THEN
    :NEW.ID_COLOR := TODOUSER.COLOR_SEQ.NEXTVAL;
END IF;
END;
/

--#region ICON
--TABLE ICON
-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.icon CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.icon_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.icon_table_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
-- Create table
CREATE TABLE TODOUSER.ICON (
ID_ICON   NUMBER PRIMARY KEY,
ICON_NAME VARCHAR2(32) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE TODOUSER.ICON_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER TODOUSER.ICON_TABLE_TRIGGER BEFORE
INSERT ON TODOUSER.ICON
FOR EACH ROW
BEGIN
IF :NEW.ID_ICON IS NULL THEN
    :NEW.ID_ICON := TODOUSER.ICON_SEQ.NEXTVAL;
END IF;
END;
/

--#region PROJECT
--TABLE PROJECT
-- Drop if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.PROJECT CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.PROJECT_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.PROJECT_table_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
-- Table creation
CREATE TABLE TODOUSER.PROJECT (
ID_PROJECT   INTEGER PRIMARY KEY,
PROJECT_NAME VARCHAR(255) NOT NULL,
DESCRIPTION  CLOB,
ID_COLOR     INTEGER,
ID_ICON      INTEGER,
ACTIVE_SPRINT INTEGER NULL,

CONSTRAINT FK_COLOR_PROJECT FOREIGN KEY ( ID_COLOR )
    REFERENCES TODOUSER.COLOR ( ID_COLOR )
        ON DELETE SET NULL,
CONSTRAINT FK_ICON_PROJECT FOREIGN KEY ( ID_ICON )
    REFERENCES TODOUSER.ICON ( ID_ICON )
        ON DELETE SET NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE TODOUSER.PROJECT_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER TODOUSER.PROJECT_TABLE_TRIGGER BEFORE
INSERT ON TODOUSER.PROJECT
FOR EACH ROW
BEGIN
IF :NEW.ID_PROJECT IS NULL THEN
    :NEW.ID_PROJECT := TODOUSER.PROJECT_SEQ.NEXTVAL;
END IF;
END;
/

--#region USER_PROJECT
--USER_PROJECT TABLE
-- Delete if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.user_PROJECT CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN -- ORA-00942: La tabla no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.user_PROJECT_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.user_PROJECT_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/
--Create table
CREATE TABLE TODOUSER.USER_PROJECT (
ID_USER_PROJECT NUMBER PRIMARY KEY,
ID_USER         INTEGER NOT NULL,
ID_PROJECT      INTEGER NOT NULL,
ROLE            VARCHAR2(64) NOT NULL,
CONSTRAINT FK_USER FOREIGN KEY ( ID_USER )
    REFERENCES TODOUSER.USER_TABLE( ID_USER )
        ON DELETE CASCADE,
CONSTRAINT FK_PROJECT FOREIGN KEY ( ID_PROJECT )
    REFERENCES TODOUSER.PROJECT ( ID_PROJECT )
        ON DELETE CASCADE
);

CREATE SEQUENCE TODOUSER.USER_PROJECT_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TODOUSER.USER_PROJECT_TRIGGER BEFORE
INSERT ON TODOUSER.USER_PROJECT
FOR EACH ROW
BEGIN
IF :NEW.ID_USER_PROJECT IS NULL THEN
    :NEW.ID_USER_PROJECT := TODOUSER.USER_PROJECT_SEQ.NEXTVAL;
END IF;
END;
/

--#region SPRINT
--Sprint Table
-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.sprint CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Drop sequence if exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.sprint_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
        RAISE;
    END IF;
END;
/
-- Drop trigger if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.sprint_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN
        RAISE;
    END IF;
END;
/

-- Create table
CREATE TABLE TODOUSER.SPRINT (
ID_SPRINT     NUMBER PRIMARY KEY,
ID_PROJECT    INTEGER NOT NULL,
SPRINT_NUMBER INTEGER NULL,
START_DATE    TIMESTAMP NULL,
END_DATE      TIMESTAMP NULL,
CONSTRAINT FK_SPRINT_PROJECT FOREIGN KEY ( ID_PROJECT )
    REFERENCES TODOUSER.PROJECT ( ID_PROJECT )
        ON DELETE CASCADE
);

-- Create sequence for auto-increment
CREATE SEQUENCE TODOUSER.SPRINT_SEQ START WITH 1 INCREMENT BY 1;
-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER TODOUSER.SPRINT_TRIGGER BEFORE
INSERT ON TODOUSER.SPRINT
FOR EACH ROW
BEGIN
IF :NEW.ID_SPRINT IS NULL THEN
    :NEW.ID_SPRINT := TODOUSER.SPRINT_SEQ.NEXTVAL;
END IF;
END;
/


--#region SHORTCUT
--SHORTCUT TABLE

-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.shortcut CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Drop sequence if exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.shortcut_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
        RAISE;
    END IF;
END;
/
-- Drop trigger if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.shortcut_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN
        RAISE;
    END IF;
END;
/

-- Create table
CREATE TABLE TODOUSER.SHORTCUT (
ID_SHORTCUT  NUMBER PRIMARY KEY,
ID_PROJECT   INTEGER NOT NULL,
SHORTCUT_URL VARCHAR2(500) NOT NULL,
CONSTRAINT FK_SHORTCUT_PROJECT FOREIGN KEY ( ID_PROJECT )
    REFERENCES TODOUSER.PROJECT ( ID_PROJECT )
        ON DELETE CASCADE
);

-- Create sequence for auto-increment
CREATE SEQUENCE TODOUSER.SHORTCUT_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER TODOUSER.SHORTCUT_TRIGGER BEFORE
INSERT ON TODOUSER.SHORTCUT
FOR EACH ROW
BEGIN
IF :NEW.ID_SHORTCUT IS NULL THEN
    :NEW.ID_SHORTCUT := TODOUSER.SHORTCUT_SEQ.NEXTVAL;
END IF;
END;
/

--#region CATEGORY
-- CATEGORY TABLE

-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.category CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Drop sequence if exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.category_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
        RAISE;
    END IF;
END;
/
-- Drop trigger if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.category_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN
        RAISE;
    END IF;
END;
/

-- Create table
CREATE TABLE TODOUSER.CATEGORY (
ID_CATEGORY   NUMBER PRIMARY KEY,
CATEGORY_NAME VARCHAR2(64) NOT NULL,
ID_PROJECT    INTEGER NOT NULL,
ID_COLOR      INTEGER,
CONSTRAINT FK_CATEGORY_PROJECT FOREIGN KEY ( ID_PROJECT )
    REFERENCES TODOUSER.PROJECT ( ID_PROJECT )
        ON DELETE CASCADE,
CONSTRAINT FK_CATEGORY_COLOR FOREIGN KEY ( ID_COLOR )
    REFERENCES TODOUSER.COLOR ( ID_COLOR )
        ON DELETE SET NULL
);

-- Create sequence for auto-increment
CREATE SEQUENCE TODOUSER.CATEGORY_SEQ START WITH 1 INCREMENT BY 1;
-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER TODOUSER.CATEGORY_TRIGGER BEFORE
INSERT ON TODOUSER.CATEGORY
FOR EACH ROW
BEGIN
IF :NEW.ID_CATEGORY IS NULL THEN
    :NEW.ID_CATEGORY := TODOUSER.CATEGORY_SEQ.NEXTVAL;
END IF;
END;
/

--#region TYPE




--#region PRIORITY




--#region STATE
-- TASK type, priority and state TABLES

-- DROP TABLES if they exist
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.task_state CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.task_type CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/

BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.task_priority CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- CREATE task_state lookup table
CREATE TABLE TODOUSER.TASK_STATE (
ID_STATE   NUMBER PRIMARY KEY,
STATE_NAME VARCHAR2(32) NOT NULL
);
-- CREATE task_type lookup table
CREATE TABLE TODOUSER.TASK_TYPE (
ID_TYPE   NUMBER PRIMARY KEY,
TYPE_NAME VARCHAR2(32) NOT NULL
);
-- CREATE task_priority lookup table
CREATE TABLE TODOUSER.TASK_PRIORITY (
ID_PRIORITY   NUMBER PRIMARY KEY,
PRIORITY_NAME VARCHAR2(32) NOT NULL
);

INSERT INTO TODOUSER.TASK_STATE (
ID_STATE,
STATE_NAME
) VALUES ( 1,
    'todo' );

INSERT INTO TODOUSER.TASK_STATE (
ID_STATE,
STATE_NAME
) VALUES ( 2,
    'doing' );

INSERT INTO TODOUSER.TASK_STATE (
ID_STATE,
STATE_NAME
) VALUES ( 3,
    'done' );

INSERT INTO TODOUSER.TASK_STATE (
ID_STATE,
STATE_NAME
) VALUES ( 4,
    'canceled' );

INSERT INTO TODOUSER.TASK_TYPE (
ID_TYPE,
TYPE_NAME
) VALUES ( 1,
    'bug' );

INSERT INTO TODOUSER.TASK_TYPE (
ID_TYPE,
TYPE_NAME
) VALUES ( 2,
    'fix' );

INSERT INTO TODOUSER.TASK_TYPE (
ID_TYPE,
TYPE_NAME
) VALUES ( 3,
    'issue' );

INSERT INTO TODOUSER.TASK_TYPE (
ID_TYPE,
TYPE_NAME
) VALUES ( 4,
    'task' );

INSERT INTO TODOUSER.TASK_PRIORITY (
ID_PRIORITY,
PRIORITY_NAME
) VALUES ( 1,
    'low' );

INSERT INTO TODOUSER.TASK_PRIORITY (
ID_PRIORITY,
PRIORITY_NAME
) VALUES ( 2,
    'medium' );

INSERT INTO TODOUSER.TASK_PRIORITY (
ID_PRIORITY,
PRIORITY_NAME
) VALUES ( 3,
    'high' );

INSERT INTO TODOUSER.TASK_PRIORITY (
ID_PRIORITY,
PRIORITY_NAME
) VALUES ( 4,
    'critical' );

--#region TASK
-- TASK TABLE
-- DROP TABLE task if it exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.task CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- DROP SEQUENCE task_seq if it exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.task_seq';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
        RAISE;
    END IF;
END;
/
-- DROP TRIGGER task_trigger if it exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.task_trigger';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
        RAISE;
    END IF;
END;
/

-- CREATE task table
CREATE TABLE TODOUSER.TASK (
ID_TASK       INTEGER PRIMARY KEY,
TITLE         VARCHAR2(64) NOT NULL,
DESCRIPTION   CLOB NULL,
TASK_STATE    INTEGER NULL,
CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ESTIMATED_HOURS INT NULL,
REAL_HOURS    INT NULL,
ASSIGNED_TO   INTEGER NULL,
CATEGORY      INTEGER,
SPRINT_ID     INTEGER,
PROJECT_ID    INTEGER,
TASK_TYPE     INTEGER,
TASK_PRIORITY INTEGER,
DELETED       INTEGER DEFAULT 0,

-- Foreign Key References
FOREIGN KEY ( TASK_STATE )
    REFERENCES TODOUSER.TASK_STATE ( ID_STATE )
        ON DELETE SET NULL,
FOREIGN KEY ( ASSIGNED_TO )
    REFERENCES TODOUSER.USER_PROJECT( ID_USER_PROJECT )
        ON DELETE SET NULL,
FOREIGN KEY ( SPRINT_ID )
    REFERENCES TODOUSER.SPRINT ( ID_SPRINT )
        ON DELETE SET NULL,
FOREIGN KEY ( TASK_TYPE )
    REFERENCES TODOUSER.TASK_TYPE ( ID_TYPE )
        ON DELETE SET NULL,
FOREIGN KEY ( TASK_PRIORITY )
    REFERENCES TODOUSER.TASK_PRIORITY ( ID_PRIORITY )
        ON DELETE SET NULL,
FOREIGN KEY ( CATEGORY )
    REFERENCES TODOUSER.CATEGORY ( ID_CATEGORY )
        ON DELETE SET NULL,
FOREIGN KEY ( PROJECT_ID )
    REFERENCES TODOUSER.PROJECT ( ID_PROJECT )
        ON DELETE CASCADE
);

-- Create the sequence for task table ID
CREATE SEQUENCE TODOUSER.TASK_SEQ START WITH 1 INCREMENT BY 1;

-- Create the trigger for auto-increment behavior
CREATE OR REPLACE TRIGGER TODOUSER.TASK_TRIGGER BEFORE
INSERT ON TODOUSER.TASK
FOR EACH ROW
BEGIN
IF :NEW.ID_TASK IS NULL THEN
    :NEW.ID_TASK := TODOUSER.TASK_SEQ.NEXTVAL;
END IF;
END;
/

--#region LOG ACTION
--SHORTCUT TABLE

-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.LOG_ACTION CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Drop sequence if exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.LOG_ACTION_SEQ';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
        RAISE;
    END IF;
END;
/
-- Drop trigger if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.LOG_ACTION_TRIGGER';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN
        RAISE;
    END IF;
END;
/

-- Create table
CREATE TABLE TODOUSER.LOG_ACTION (
ID_LOG_ACTION  NUMBER PRIMARY KEY,
LABEL VARCHAR2(64)
);

-- Create sequence for auto-increment
CREATE SEQUENCE TODOUSER.LOG_ACTION_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER TODOUSER.LOG_ACTION_TRIGGER BEFORE
INSERT ON TODOUSER.LOG_ACTION
FOR EACH ROW
BEGIN
IF :NEW.ID_LOG_ACTION IS NULL THEN
    :NEW.ID_LOG_ACTION := TODOUSER.LOG_ACTION_SEQ.NEXTVAL;
END IF;
END;
/

--#region LOGS
--SHORTCUT TABLE

-- Drop table if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TABLE TODOUSER.LOGS CASCADE CONSTRAINTS';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -942 THEN
        RAISE;
    END IF;
END;
/
-- Drop sequence if exists
BEGIN
EXECUTE IMMEDIATE 'DROP SEQUENCE TODOUSER.LOGS_SEQ';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -2289 THEN
        RAISE;
    END IF;
END;
/
-- Drop trigger if exists
BEGIN
EXECUTE IMMEDIATE 'DROP TRIGGER TODOUSER.LOGS_TRIGGER';
EXCEPTION
WHEN OTHERS THEN
    IF SQLCODE != -4080 THEN
        RAISE;
    END IF;
END;
/

-- Create table
CREATE TABLE TODOUSER.LOGS (
ID_LOG  NUMBER PRIMARY KEY,
PROJECT_ID INTEGER NULL,
ACTION_LOG INTEGER,
USER_PROJECT INTEGER NULL,
TIME_OF_LOG TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
TASK INTEGER NULL,
SPRINT INTEGER NULL,

FOREIGN KEY ( ACTION_LOG )
    REFERENCES TODOUSER.LOG_ACTION ( ID_LOG_ACTION )
        ON DELETE SET NULL
);

-- Create sequence for auto-increment
CREATE SEQUENCE TODOUSER.LOGS_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER TODOUSER.LOGS_TRIGGER BEFORE
INSERT ON TODOUSER.LOGS
FOR EACH ROW
BEGIN
IF :NEW.ID_LOG IS NULL THEN
    :NEW.ID_LOG := TODOUSER.LOGS_SEQ.NEXTVAL;
END IF;
END;
/

--#region Procedures
CREATE OR REPLACE PROCEDURE GET_NEXT_SPRINT_NUMBER (
    p_project_id IN INTEGER,
    p_next_sprint OUT INTEGER
) AS
BEGIN
    SELECT NVL(MAX(sprint_number), 0) + 1
    INTO p_next_sprint
    FROM TODOUSER.SPRINT
    WHERE ID_PROJECT = p_project_id;
END;
/