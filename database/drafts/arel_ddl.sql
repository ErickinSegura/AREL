-- USER_TABLE

--#region USER
-- Drop if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE user_table CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE user_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER user_table_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/
-- Table creation
CREATE TABLE USER_TABLE (
    ID_USER   NUMBER PRIMARY KEY,
    FIRSTNAME VARCHAR2(255) NOT NULL,
    LASTNAME  VARCHAR2(255) NOT NULL,
    EMAIL     VARCHAR2(255) UNIQUE NOT NULL,
    PASSWORD  VARCHAR2(255) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE USER_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER USER_TABLE_TRIGGER BEFORE
    INSERT ON USER_TABLE
    FOR EACH ROW
BEGIN
    IF :NEW.ID_USER IS NULL THEN
        :NEW.ID_USER := USER_SEQ.NEXTVAL;
    END IF;
END;
/

--#endregion

--#region COLOR
--TABLE COLOR
-- Drop table if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE color CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE color_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER color_table_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/
-- Create table
CREATE TABLE COLOR (
    ID_COLOR  NUMBER PRIMARY KEY,
    HEX_COLOR VARCHAR2(8) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE COLOR_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER COLOR_TABLE_TRIGGER BEFORE
    INSERT ON COLOR
    FOR EACH ROW
BEGIN
    IF :NEW.ID_COLOR IS NULL THEN
        :NEW.ID_COLOR := COLOR_SEQ.NEXTVAL;
    END IF;
END;
/

INSERT INTO COLOR ( HEX_COLOR ) VALUES ( 'FFFFFF' );

INSERT INTO COLOR ( HEX_COLOR ) VALUES ( 'AAAAAA' );

--#region ICON
--TABLE ICON
-- Drop table if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE icon CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE icon_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER icon_table_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/
-- Create table
CREATE TABLE ICON (
    ID_ICON   NUMBER PRIMARY KEY,
    ICON_NAME VARCHAR2(32) NOT NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE ICON_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER ICON_TABLE_TRIGGER BEFORE
    INSERT ON ICON
    FOR EACH ROW
BEGIN
    IF :NEW.ID_ICON IS NULL THEN
        :NEW.ID_ICON := ICON_SEQ.NEXTVAL;
    END IF;
END;
/

INSERT INTO ICON ( ICON_NAME ) VALUES ( 'icon-name-1' );

INSERT INTO ICON ( ICON_NAME ) VALUES ( 'icon-name-2' );

--#region PROYECT
--TABLE PROYECT
-- Drop if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE proyect CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Eliminar la secuencia si existe
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE proyect_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER proyect_table_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/
-- Table creation
CREATE TABLE PROYECT (
    ID_PROYECT   INTEGER PRIMARY KEY,
    PROYECT_NAME VARCHAR(255) NOT NULL,
    DESCRIPTION  CLOB,
    ID_COLOR     INTEGER,
    ID_ICON      INTEGER,

  --TODO:AGREGAR FK con color e icono nulleable
    CONSTRAINT FK_COLOR_PROYECT FOREIGN KEY ( ID_COLOR )
        REFERENCES COLOR ( ID_COLOR )
            ON DELETE SET NULL,
    CONSTRAINT FK_ICON_PROYECT FOREIGN KEY ( ID_ICON )
        REFERENCES ICON ( ID_ICON )
            ON DELETE SET NULL
);
-- Sequence for autoincrement
CREATE SEQUENCE PROYECT_SEQ START WITH 1 INCREMENT BY 1;
-- Trigger for autoincrement
CREATE OR REPLACE TRIGGER PROYECT_TABLE_TRIGGER BEFORE
    INSERT ON PROYECT
    FOR EACH ROW
BEGIN
    IF :NEW.ID_PROYECT IS NULL THEN
        :NEW.ID_PROYECT := PROYECT_SEQ.NEXTVAL;
    END IF;
END;
/

--#region USER_PROYECT
--USER_PROYECT TABLE
-- Delete if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE user_proyect CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN -- ORA-00942: La tabla no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE user_proyect_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER user_proyect_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/
--Create table
CREATE TABLE USER_PROYECT (
    ID_USER_PROYECT NUMBER PRIMARY KEY,
    ID_USER         INTEGER NOT NULL,
    ID_PROYECT      INTEGER NOT NULL,
    ROLE            VARCHAR2(64) NOT NULL,
    CONSTRAINT FK_USER FOREIGN KEY ( ID_USER )
        REFERENCES USER_TABLE ( ID_USER )
            ON DELETE CASCADE,
    CONSTRAINT FK_PROYECT FOREIGN KEY ( ID_PROYECT )
        REFERENCES PROYECT ( ID_PROYECT )
            ON DELETE CASCADE
);

CREATE SEQUENCE USER_PROYECT_SEQ START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER USER_PROYECT_TRIGGER BEFORE
    INSERT ON USER_PROYECT
    FOR EACH ROW
BEGIN
    IF :NEW.ID_USER_PROYECT IS NULL THEN
        :NEW.ID_USER_PROYECT := USER_PROYECT_SEQ.NEXTVAL;
    END IF;
END;
/

--#region SPRINT
--Sprint Table
-- Drop table if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE sprint CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Drop sequence if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE sprint_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN
            RAISE;
        END IF;
END;
/
-- Drop trigger if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER sprint_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN
            RAISE;
        END IF;
END;
/

-- Create table
CREATE TABLE SPRINT (
    ID_SPRINT     NUMBER PRIMARY KEY,
    ID_PROYECT    INTEGER NOT NULL,
    SPRINT_NUMBER INTEGER NOT NULL,
    CONSTRAINT FK_SPRINT_PROYECT FOREIGN KEY ( ID_PROYECT )
        REFERENCES PROYECT ( ID_PROYECT )
            ON DELETE CASCADE
);

-- Create sequence for auto-increment
CREATE SEQUENCE SPRINT_SEQ START WITH 1 INCREMENT BY 1;
-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER SPRINT_TRIGGER BEFORE
    INSERT ON SPRINT
    FOR EACH ROW
BEGIN
    IF :NEW.ID_SPRINT IS NULL THEN
        :NEW.ID_SPRINT := SPRINT_SEQ.NEXTVAL;
    END IF;
END;
/


--#region SHORTCUT
--SHORTCUT TABLE

-- Drop table if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE shortcut CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Drop sequence if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE shortcut_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN
            RAISE;
        END IF;
END;
/
-- Drop trigger if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER shortcut_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN
            RAISE;
        END IF;
END;
/

-- Create table
CREATE TABLE SHORTCUT (
    ID_SHORTCUT  NUMBER PRIMARY KEY,
    ID_PROYECT   INTEGER NOT NULL,
    SHORTCUT_URL VARCHAR2(500) NOT NULL,
    CONSTRAINT FK_SHORTCUT_PROYECT FOREIGN KEY ( ID_PROYECT )
        REFERENCES PROYECT ( ID_PROYECT )
            ON DELETE CASCADE
);

-- Create sequence for auto-increment
CREATE SEQUENCE SHORTCUT_SEQ START WITH 1 INCREMENT BY 1;

-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER SHORTCUT_TRIGGER BEFORE
    INSERT ON SHORTCUT
    FOR EACH ROW
BEGIN
    IF :NEW.ID_SHORTCUT IS NULL THEN
        :NEW.ID_SHORTCUT := SHORTCUT_SEQ.NEXTVAL;
    END IF;
END;
/

--#region CATEGORY
-- CATEGORY TABLE

-- Drop table if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE category CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- Drop sequence if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE category_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN
            RAISE;
        END IF;
END;
/
-- Drop trigger if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER category_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN
            RAISE;
        END IF;
END;
/

-- Create table
CREATE TABLE CATEGORY (
    ID_CATEGORY   NUMBER PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(64) NOT NULL,
    ID_PROYECT    INTEGER NOT NULL,
    ID_COLOR      INTEGER,
    CONSTRAINT FK_CATEGORY_PROYECT FOREIGN KEY ( ID_PROYECT )
        REFERENCES PROYECT ( ID_PROYECT )
            ON DELETE CASCADE,
    CONSTRAINT FK_CATEGORY_COLOR FOREIGN KEY ( ID_COLOR )
        REFERENCES COLOR ( ID_COLOR )
            ON DELETE SET NULL
);

-- Create sequence for auto-increment
CREATE SEQUENCE CATEGORY_SEQ START WITH 1 INCREMENT BY 1;
-- Create trigger for auto-increment
CREATE OR REPLACE TRIGGER CATEGORY_TRIGGER BEFORE
    INSERT ON CATEGORY
    FOR EACH ROW
BEGIN
    IF :NEW.ID_CATEGORY IS NULL THEN
        :NEW.ID_CATEGORY := CATEGORY_SEQ.NEXTVAL;
    END IF;
END;
/

--#region TYPE




--#region PRIORITY




--#region STATE
-- TASK type, priority and state TABLES

-- DROP TABLES if they exist
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE task_state CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE task_type CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE task_priority CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- CREATE task_state lookup table
CREATE TABLE TASK_STATE (
    ID_STATE   NUMBER PRIMARY KEY,
    STATE_NAME VARCHAR2(32) NOT NULL
);
-- CREATE task_type lookup table
CREATE TABLE TASK_TYPE (
    ID_TYPE   NUMBER PRIMARY KEY,
    TYPE_NAME VARCHAR2(32) NOT NULL
);
-- CREATE task_priority lookup table
CREATE TABLE TASK_PRIORITY (
    ID_PRIORITY   NUMBER PRIMARY KEY,
    PRIORITY_NAME VARCHAR2(32) NOT NULL
);

INSERT INTO TASK_STATE (
    ID_STATE,
    STATE_NAME
) VALUES ( 1,
           'todo' );

INSERT INTO TASK_STATE (
    ID_STATE,
    STATE_NAME
) VALUES ( 2,
           'doing' );

INSERT INTO TASK_STATE (
    ID_STATE,
    STATE_NAME
) VALUES ( 3,
           'done' );

INSERT INTO TASK_STATE (
    ID_STATE,
    STATE_NAME
) VALUES ( 4,
           'canceled' );

INSERT INTO TASK_TYPE (
    ID_TYPE,
    TYPE_NAME
) VALUES ( 1,
           'bug' );

INSERT INTO TASK_TYPE (
    ID_TYPE,
    TYPE_NAME
) VALUES ( 2,
           'fix' );

INSERT INTO TASK_TYPE (
    ID_TYPE,
    TYPE_NAME
) VALUES ( 3,
           'issue' );

INSERT INTO TASK_TYPE (
    ID_TYPE,
    TYPE_NAME
) VALUES ( 4,
           'task' );

INSERT INTO TASK_PRIORITY (
    ID_PRIORITY,
    PRIORITY_NAME
) VALUES ( 1,
           'low' );

INSERT INTO TASK_PRIORITY (
    ID_PRIORITY,
    PRIORITY_NAME
) VALUES ( 2,
           'medium' );

INSERT INTO TASK_PRIORITY (
    ID_PRIORITY,
    PRIORITY_NAME
) VALUES ( 3,
           'high' );

INSERT INTO TASK_PRIORITY (
    ID_PRIORITY,
    PRIORITY_NAME
) VALUES ( 4,
           'critical' );

--#region TASK
-- TASK TABLE
-- DROP TABLE task if it exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE task CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/
-- DROP SEQUENCE task_seq if it exists
BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE task_seq';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -2289 THEN -- ORA-02289: La secuencia no existe
            RAISE;
        END IF;
END;
/
-- DROP TRIGGER task_trigger if it exists
BEGIN
    EXECUTE IMMEDIATE 'DROP TRIGGER task_trigger';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -4080 THEN -- ORA-04080: El trigger no existe
            RAISE;
        END IF;
END;
/

-- CREATE task table
CREATE TABLE TASK (
    ID_TASK       INTEGER PRIMARY KEY,
    TITLE         VARCHAR2(64) NOT NULL,
    DESCRIPTION   CLOB NULL,
    TASK_STATE    INTEGER NULL,
    CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DUE_DATE      TIMESTAMP NULL,
    ASSIGNED_TO   INTEGER NULL,
    CATEGORY      INTEGER,
    SPRINT_ID     INTEGER,
    TASK_TYPE     INTEGER,
    TASK_PRIORITY INTEGER,
    DELETED       INTEGER DEFAULT 0,
    FINISHED_DATE TIMESTAMP,

  -- Foreign Key References
    FOREIGN KEY ( TASK_STATE )
        REFERENCES TASK_STATE ( ID_STATE )
            ON DELETE SET NULL,
    FOREIGN KEY ( ASSIGNED_TO )
        REFERENCES USER_TABLE ( ID_USER )
            ON DELETE SET NULL,
    FOREIGN KEY ( SPRINT_ID )
        REFERENCES SPRINT ( ID_SPRINT )
            ON DELETE CASCADE,
    FOREIGN KEY ( TASK_TYPE )
        REFERENCES TASK_TYPE ( ID_TYPE )
            ON DELETE SET NULL,
    FOREIGN KEY ( TASK_PRIORITY )
        REFERENCES TASK_PRIORITY ( ID_PRIORITY )
            ON DELETE SET NULL,
    FOREIGN KEY ( CATEGORY )
        REFERENCES CATEGORY ( ID_CATEGORY )
            ON DELETE SET NULL
);

-- Create the sequence for task table ID
CREATE SEQUENCE TASK_SEQ START WITH 1 INCREMENT BY 1;

-- Create the trigger for auto-increment behavior
CREATE OR REPLACE TRIGGER TASK_TRIGGER BEFORE
    INSERT ON TASK
    FOR EACH ROW
BEGIN
    IF :NEW.ID_TASK IS NULL THEN
        :NEW.ID_TASK := TASK_SEQ.NEXTVAL;
    END IF;
END;
/
